---- MODULE queue ----

EXTENDS Integers, Sequences, FiniteSets
CONSTANT tasks, number_of_processors, queue_size_bound
VARIABLE queue, running_tasks

----

Length (sequence) == Len (sequence)

enumerable_sequence (some_set, length_bound) ≔ UNION { [1 … length → some_set] : length ∈ 0 … length_bound }

range_of_sequence (given_sequence) ≔ {given_sequence [index] : index ∈ DOMAIN given_sequence}

enumerate_set (given_set) ≔
              LET enumerate_set_function [given_subset ∈ SUBSET given_set] ≔
                  IF given_subset = { }
                  THEN ⟨⟩
                  ELSE LET element ≔ CHOOSE element ∈ given_subset : element = element
                       IN ⟨element⟩ ∘ enumerate_set_function [given_subset \ {element}]
              IN enumerate_set_function [given_set]

take (some_set) ==
  LET take_function [that_many ∈ Nat, some_sequence ∈ Seq (some_set)] ==
     IF that_many = 0 ∨  Length (some_sequence) = 0
     THEN ⟨ ⟩
     ELSE ⟨Head(some_sequence)⟩ ∘ take_function [that_many - 1, Tail(some_sequence)]
  IN take_function

drop (some_set) ==
  LET drop_function [that_many ∈ Nat, some_sequence ∈ Seq (some_set)] ==
     IF that_many = 0 ∨ Length (some_sequence) = 0
     THEN some_sequence
     ELSE drop_function [that_many - 1, Tail (some_sequence)]
  IN drop_function

properties_of_helpers ≔
               ∧ range_of_sequence (enumerate_set (range_of_sequence (queue.queued_tasks))) = range_of_sequence (queue.queued_tasks)
               ∧ take (STRING) [2, ⟨"a", "b", "c"⟩] = ⟨"a", "b"⟩
               ∧ take (STRING) [2, ⟨"a"⟩] = ⟨"a"⟩
               ∧ drop (STRING) [2, ⟨"a", "b", "c"⟩] = ⟨"c"⟩
               ∧ drop (STRING) [2, ⟨"c"⟩] = ⟨ ⟩

----

type_invariant ≔
               ∧ queue ∈ [ queued_tasks : enumerable_sequence (tasks, queue_size_bound)
                         , number_of_running_tasks : Nat ]
               ∧ running_tasks ∈ SUBSET tasks

properties_of_queue ≔
               ∧ queue.number_of_running_tasks = Cardinality (running_tasks)

initial_state ≔
              ∧ running_tasks = { }
              ∧ queue = [queued_tasks ↦ ⟨⟩, number_of_running_tasks ↦ 0]

some_tasks_ended ≔
            ∃ ending_tasks ∈ SUBSET (running_tasks) :
              LET
                  queued_tasks_to_run == take (tasks) [Cardinality (ending_tasks), queue.queued_tasks]
                  queued_tasks_to_keep_waiting == drop (tasks) [Cardinality (ending_tasks), queue.queued_tasks]
              IN
                 ∧ queue' = [ queue EXCEPT !.queued_tasks = queued_tasks_to_keep_waiting
                            , !.number_of_running_tasks = @ - Cardinality (ending_tasks) + Length (queued_tasks_to_run) ]
                 ∧ running_tasks' = (running_tasks \ ending_tasks) ∪ range_of_sequence (queued_tasks_to_run)

tasks_added (given_tasks) ≔
        ∧ given_tasks ∩ running_tasks = { }
        ∧ given_tasks ∩ range_of_sequence (queue.queued_tasks) = { }
        ∧   LET
                sequence_of_given_tasks == enumerate_set (given_tasks)
                sequence_of_tasks_to_run == take (tasks) [number_of_processors - queue.number_of_running_tasks, sequence_of_given_tasks]
                sequence_of_tasks_to_queue == drop (tasks) [number_of_processors - queue.number_of_running_tasks, sequence_of_given_tasks]
            IN
                ∧ Length (queue.queued_tasks) + Length (sequence_of_tasks_to_queue) < queue_size_bound
                ∧ queue' = [ queue EXCEPT !.queued_tasks = @ ∘ sequence_of_tasks_to_queue
                           , !.number_of_running_tasks = @ + Length (sequence_of_tasks_to_run) ]
                ∧ running_tasks' = running_tasks ∪ range_of_sequence (sequence_of_tasks_to_run)

next_state ≔ some_tasks_ended ∨ ∃ some_tasks ∈ SUBSET tasks : tasks_added (some_tasks)

specification ≔ initial_state ∧ [][next_state]_⟨queue, running_tasks⟩

respectful ≔ Cardinality (running_tasks) ≤ number_of_processors
efficient ≔ Length (queue.queued_tasks) > 0 ⇒ Cardinality (running_tasks) = number_of_processors

====